[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "PhD in statistics, AI research scientist.\nCurious and interested in science, I like being confronted to complex challenges. Modelling the problem, developing algorithms and pushing them to production are stages I step into."
  },
  {
    "objectID": "posts/encoding-distances/unimol-gbf.html",
    "href": "posts/encoding-distances/unimol-gbf.html",
    "title": "Encoding distances in molecules and pockets",
    "section": "",
    "text": "In this article, we aim at comparing two different ways of encoding distances in 3D molecules and pockets. Our analysis relies on a universal 3D molecular representation learning framework Uni-Mol. Code https://github.com/dptech-corp/Uni-Mol and article (Zhou et al. 2023) are available. In brief, Uni-Mol is a 3D foundation model for molecules and pockets based on a SE(3) Transformer architecture. It comprises two pretrained models: one for molecular conformations and another for protein pocket data. Uni-Mol is pretrained on large-scale unlabeled data and is able to directly take 3D positions as both inputs and outputs. Uni-Mol backbone is a Transformer based model that can capture the input 3D information and predict 3D positions directly. Uni-Mol pretraining is done on two large-scale datasets: a 209M molecular conformation dataset and a 3M candidate protein pocket dataset, for pretraining 2 models on molecules and protein pockets, respectively. In the pretraining phase, Uni-Mol has to predict masked atoms, as well as masked noisy atoms coordinates and distances for effectively learning 3D spatial representation. The overall pretraining architecture is illustrated in Figure 2 and the framework is given in Figure 1 (taken from (Zhou et al. 2023)).\n\n\n\n\n\n\nFigure 1: Schematic illustration of the Uni-Mol framework\n\n\n\n\n\n\n\n\n\nFigure 2: Left: the overall pretraining architecture. Middle: the model inputs, including atom representation and pair representation. Right: details in the model block.\n\n\n\nWe focus here on the encoding of the coordinates in distances (pair representation in Figure 2 middle part) and the decoding part, prediction of distances (pair-dist head in Figure 2 left part). In (Zhou et al. 2023) Section D.1, 3D spatial positional encodings benchmark, they investigate the performance of different 3D spatial positional encoding on the 3D molecular pretraining. In particular, they benchmarked:\n\nGaussian kernel (GK), a simply Gaussian density function.\nGaussian kennel with pair type (GKPT) (Shuaibi et al. 2021). Based on GK, an affine transformation according to the pair type is applied on pair distances, before applying the Gaussian kernel.\nRadial Bessel basis (RBB) (Gasteiger, Yeshwanth, and Günnemann 2021). A Bessel based radial function.\nDiscretization categorical embedding (DCE). We convert the continued distances to the discrete bins, by Discretization. With binned distances, embedding-based positional encoding is directly used.\nDelta coordinate (DC) (Zhao et al. 2021). Following Point Transformer, the deltas of coordinates are directly used as pair-wise spatial relative positional encoding.\nGaussian kennel with pair type and local graph (GKPTLG). Based on GKPT, we set up a model with locally connected graphs. In particular, the cutoff radius is set to 6 Å.\n\nThe validation loss during pretraining for each encoding is summarized in Figure 3 (taken from (Zhou et al. 2023)). From the results, they drew the following conclusions:\n\nThe performance of DCE and GK are almost the same, and outperform RBB and DC. And we choose GK as the basic encoding.\nCompared with GK, GKPT convergences faster. This indicates the pair type is critical in the 3D spatial positional encoding.\nCompared with GKPT, GKPTLG convergences slower. This indicates the locally cutoff graph is not effective for self-supervised learning, and the default fully connected graph in Transformer is more effective.\nAs GKPT outperforms all other encoding, they use it in the backbone model of Uni-Mol.\n\n\n\n\n\n\n\nFigure 3: Validation loss in pretraining for different 3D spatial encodings\n\n\n\nThe code for the GKPT encoding is given by\n@torch.jit.script\ndef gaussian(x, mean, std):\n    pi = 3.14159\n    a = (2 * pi) ** 0.5\n    return torch.exp(-0.5 * (((x - mean) / std) ** 2)) / (a * std)\n\n\nclass GaussianLayer(nn.Module):\n    def __init__(self, K=128, edge_types=1024):\n        super().__init__()\n        self.K = K\n        self.means = nn.Embedding(1, K)\n        self.stds = nn.Embedding(1, K)\n        self.mul = nn.Embedding(edge_types, 1)\n        self.bias = nn.Embedding(edge_types, 1)\n        nn.init.uniform_(self.means.weight, 0, 3)\n        nn.init.uniform_(self.stds.weight, 0, 3)\n        nn.init.constant_(self.bias.weight, 0)\n        nn.init.constant_(self.mul.weight, 1)\n\n    def forward(self, x, edge_type):\n        mul = self.mul(edge_type).type_as(x)\n        bias = self.bias(edge_type).type_as(x)\n        x = mul * x.unsqueeze(-1) + bias\n        x = x.expand(-1, -1, -1, self.K)\n        mean = self.means.weight.float().view(-1)\n        std = self.stds.weight.float().view(-1).abs() + 1e-5\n        return gaussian(x.float(), mean, std).type_as(self.means.weight)\nK represents the number of Gaussian basis functions, edge_types the number of possible edge types, x the distance matrix (for an initial 3D molecule or pocket) and edge_type the corresponding edge type matrix.\n\n\n\n\n\n\nNote\n\n\n\nAll the Uni-Mol experiments run for this article are based on a small pockets dataset inspired from PDBbind http://www.pdbbind.org.cn/. The dataset is split in a train and validation dataset relying on pockets similarities. The wandb project is available https://wandb.ai/nicolasb/unimol_analysis/ as well as a summary report https://api.wandb.ai/links/nicolasb/kdz59bry.\n\n\nWhen we train Uni-Mol on a small dataset of pockets inspired from PDBbind http://www.pdbbind.org.cn/, we remark that the gradients related to GaussianLayer parameters are not stable and can take very large values. In Figure 4, some gradients are of the order of one thousand. Uni-Mol relies on Uni-Core which implements gradient clipping and these high values do not affect the stability of the training.\n\n\n\n\n\n\nFigure 4: Gradients of GaussianLayer parameters (GBFPT encoding)\n\n\n\nNevertheless, we wanted to try another encoding that would be naturally stable without exploding gradients. Discretization categorical embedding (DCE) seemed to be another good encoding from Uni-Mol benchmark. Besides, DCE is the encoding used in AlphaFold (Jumper et al. 2021). We implemented Discretization categorical embedding with Pair Type encoding (DCEPT) that takes into account the edge type.\nclass DistEncoding(nn.Module):\n    def __init__(\n        self,\n        distogram_nb_bins: int,\n        nb_edge_types: int,\n        embedding_dim: int,\n        edge_type_padding_idx: int,\n        encoder_attention_heads: int,\n        activation_fn: str,\n    ):\n        super(DistEncoding, self).__init__()\n        self.dist_embedding = nn.Embedding(\n            num_embeddings=distogram_nb_bins,\n            embedding_dim=embedding_dim,\n            padding_idx=PAD_DIST,\n        )\n        self.edge_type_embedding = nn.Embedding(\n            num_embeddings=nb_edge_types,\n            embedding_dim=embedding_dim,\n            padding_idx=edge_type_padding_idx,\n        )\n        self.projection = NonLinearModule(\n            input_dim=2 * embedding_dim,\n            out_dim=encoder_attention_heads,\n            activation_fn=activation_fn,\n        )\n\n    def forward(\n        self, distogram: torch.Tensor, edge_types: torch.Tensor\n    ) -&gt; torch.Tensor:\n        n_node = distogram.size(-1)\n        dist_embeddings = self.dist_embedding(distogram)\n        edge_types_embeddings = self.edge_type_embedding(edge_types)\n        embeddings = torch.concat((dist_embeddings, edge_types_embeddings), dim=-1)\n        attn_bias = self.projection(embeddings)\n        attn_bias = attn_bias.permute(0, 3, 1, 2).contiguous()\n        attn_bias = attn_bias.view(-1, n_node, n_node)\n        return attn_bias\ndistogram_nb_bins is the number of bins (128 by default), nb_edge_types the number of edge types, embedding_dim the dimension of the embedding (128 by default), encoder_attention_heads the number of attention heads in the transformer because the distance encoding is directly injected in the attention matrix. distogram is the distogram (discretization of the distance matrix) and edge_types the edge types. We concatenate the two embeddings creating de facto the DCEPT and then project to feed into the attention matrix.\nDuring the training, the gradients related to DistEncoding parameters do not take large values and are naturally stable without clipping gradients. This is illustrated in Figure 5.\n\n\n\n\n\n\nFigure 5: Gradients of DistEncoding parameters (DCEPT encoding)\n\n\n\nFollowing (Jumper et al. 2021) distogram prediction task, we also replace the distance prediction task (mean squared error loss) implemented in Uni-Mol by a distogram prediction task (cross entropy loss). We remark that this loss replacement does not change the characteristics of Uni-Mol.\nOn the small pockets inspired from PDBbind http://www.pdbbind.org.cn/, we notice that the training and validation loss curves are better with DCEPT encoding compared to GBFPT encoding (on average), see Figure 6. More precisely, the masked_token_loss and the masked_acc metrics related to the recovery of masked atoms seem to stagnate a little at first with DCEPT encoding compared to GBFPT encoding. It may be due to the fact that DCEPT are at first completely random embeddings and less intuitive for the neural network. However, the masked_coord_loss is better with DCEPT encoding both in the training and validation sets. Note that the masked_distogram_loss corresponds to the distogram loss (cross entropy loss) used in AlphaFold (Jumper et al. 2021) and is implemented only for DCEPT encoding. For DCEPT encoding, we also add a distance prediction head with the corresponding MSE loss taken from Uni-Mol and a small multiplication factor (0.01). That explains why the DCEPT masked_dist_loss decreases slightly slower than GBFPT. Several additional experiments (not shown here) demonstrate that using a distogram or distance loss does not change the behavior of Uni-Mol.\nIn conclusion, according to the loss curves and the stability of the gradients, DCEPT seems to be a better encoding than GBFPT (or at least as good as).\n\n\n\n\n\n\nFigure 6: Uni-Mol training and validation losses with GBFPT and DCEPT encoding\n\n\n\nHowever, Uni-Mol stands as a foundational model pre-trained through unsupervised methods. The pre-training metrics do not reflect the expected capabilities of the model. Notably, we expect that the pockets embeddings obtained with Uni-Mol should be good proxies of the pockets themselves: if two pockets are close to each other, their embeddings should be close in cos similarity or euclidean distance.\nWe have collected a dataset of 5 pockets (taken from 2oax, 3oxc, 5kxi, 5zk3 and 6v7a proteins) and for each pocket, a group of similar and dissimilar pockets. We compute the cos similarities between each reference pocket and the similar/dissimilar pockets and we sort the pockets by their cos similarity. Better embeddings translate into more similar pockets in the top retrieved pockets. More precisely, we sort the pockets by their cos similarities, we select the top 100 pockets, we count the number of similar pockets in the top 100 and we get a number between 0 and 1, the higher the better. We test two different embeddings: either, the vector corresponding to the [CLS] token (see (Zhou et al. 2023) Section 2.2) (indicated by _cls) or the mean of the pocket atoms vectors (indicated by _mean). Table 1 summarizes the results for each encoding, embedding and reference pocket and we remark that\n\nGBFPT is superior to DCEPT for pockets retrieval,\nThe mean of the pocket atoms vectors is better or near as good as the [CLS] embedding.\n\n\n\n\nTable 1: Uni-Mol pockets retrieval with GBFPT or DCEPT encoding (higher is better)\n\n\n\n\n\n\n6v7a\n2oax\n5kxi\n5zk3\n3oxc\n\n\n\n\nunimol_gbfpt_cls\n0.46\n1.0\n0.32\n0.3\n1.0\n\n\nunimol_gbfpt_mean\n0.79\n1.0\n0.38\n0.29\n1.0\n\n\nunimol_dcept_cls\n0.3\n1.0\n0.26\n0.29\n1.0\n\n\nunimol_dcept_mean\n0.51\n1.0\n0.27\n0.28\n1.0\n\n\n\n\n\n\nIn conclusion, despite better pre-training behavior and metrics, DCEPT encoding is disappointing when it comes to embeddings comparison. We suppose that this defect comes from a higher sensitivity of the discretization procedure. Two distance matrices from two close pockets may be more sharply distinguished with DCEPT encoding compared to GBFPT encoding. To test this hypothesis, we take the 6v7a pocket and we noise its coordinates with a uniform noise between 0 and 1A. Since we have a batch size of 16, we fill up a batch with the reference pocket 6v7a and 15 noisy pockets. For each pocket, the distance matrix is encoded by GBFPT or DCEPT and we get an encoding of size 128 for each distance in the distance matrix. We compute the cos similarities between each encoding and the reference encoding in the reference matrix distance of 6v7a and we obtain the overall statistics of these cos similarities for GBFPT and DCEPT. In Table 2, we have the absolute errors statistics between 1 and the cos similarities of the noisy pockets from 6v7a, the lower the better. We remark that as presumed DCEPT encoding is less robust to noise compared to GBFPT encoding.\n\n\n\nTable 2: Statistics of cos similarities errors for noisy pockets from 6v7a\n\n\n\n\n\n\n\n\n\n\n\nErrors cos similarities GBFPT encoding\nErrors cos similarities DCEPT encoding\n\n\n\n\nmean\n0.002\n0.020\n\n\nmedian\n0.000\n0.007\n\n\n\n\n\n\n\n\n\n\nReferences\n\nGasteiger, Johannes, Chandan Yeshwanth, and Stephan Günnemann. 2021. “Directional Message Passing on Molecular Graphs via Synthetic Coordinates.” In Advances in Neural Information Processing Systems, edited by M. Ranzato, A. Beygelzimer, Y. Dauphin, P. S. Liang, and J. Wortman Vaughan, 34:15421–33. Curran Associates, Inc. https://proceedings.neurips.cc/paper_files/paper/2021/file/82489c9737cc245530c7a6ebef3753ec-Paper.pdf.\n\n\nJumper, John, Richard Evans, Alexander Pritzel, Tim Green, Michael Figurnov, Olaf Ronneberger, Kathryn Tunyasuvunakool, et al. 2021. “Highly Accurate Protein Structure Prediction with AlphaFold.” Nature 596 (7873): 583–89. https://doi.org/10.1038/s41586-021-03819-2.\n\n\nShuaibi, Muhammed, Adeesh Kolluru, Abhishek Das, Aditya Grover, Anuroop Sriram, Zachary Ulissi, and C. Lawrence Zitnick. 2021. “Rotation Invariant Graph Neural Networks Using Spin Convolutions.” https://arxiv.org/abs/2106.09575.\n\n\nZhao, Hengshuang, Li Jiang, Jiaya Jia, Philip Torr, and Vladlen Koltun. 2021. “Point Transformer.” In 2021 IEEE/CVF International Conference on Computer Vision (ICCV), 16239–48. https://doi.org/10.1109/ICCV48922.2021.01595.\n\n\nZhou, Gengmo, Zhifeng Gao, Qiankun Ding, Hang Zheng, Hongteng Xu, Zhewei Wei, Linfeng Zhang, and Guolin Ke. 2023. “Uni-Mol: A Universal 3D Molecular Representation Learning Framework.” In The Eleventh International Conference on Learning Representations. https://openreview.net/forum?id=6K2RM6wVqKu."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nEncoding distances in molecules and pockets\n\n\n\n\n\nDistance encoding\n\n\n\n\n\nApr 24, 2024\n\n\nNicolas Brosse\n\n\n\n\n\n\nNo matching items"
  }
]